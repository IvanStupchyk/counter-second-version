{"version":3,"sources":["components/Counter/Scoreboard/Scoreboard.module.css","components/Counter/Buttons/Btn/Btn.module.css","components/Counter/Counter.module.css","components/Counter/Buttons/Buttons.module.css","components/Counter/Scoreboard/Scoreboard.tsx","components/Counter/Buttons/Btn/Btn.tsx","components/Counter/Buttons/Buttons.tsx","components/Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Scoreboard","props","classNameInputMax","s","input_value","errorCondition","incorrect_value","classNameInputMin","className","scoreboard_container","showSettings","values_position","title_value","type","onChange","e","changeMaxValue","currentTarget","value","maxValue","changeMinValue","minValue","amount","counter","limit","Btn","disabledBtn","btn","btn_container","btn_disabled","disabled","onClick","increaseCounter","resetCounter","changeSettingsScreen","setValues","localStorage","setItem","JSON","stringify","Buttons","Counter","counter_container","App","JsonValues","getItem","CounterValues","parse","useState","setMinValue","setMaxValue","setShowSettings","setCounter","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38bae75f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard_container\":\"Scoreboard_scoreboard_container__1-ZQP\",\"amount\":\"Scoreboard_amount__39MS7\",\"limit\":\"Scoreboard_limit__drm9i\",\"value_container\":\"Scoreboard_value_container__2t5-Q\",\"values_position\":\"Scoreboard_values_position__2qNnI\",\"title_value\":\"Scoreboard_title_value__1G6Hg\",\"input_value\":\"Scoreboard_input_value__2r9bp\",\"incorrect_value\":\"Scoreboard_incorrect_value__3VK7v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Btn_btn__1yLXW\",\"btn_disabled\":\"Btn_btn_disabled__3yhp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_container\":\"Counter_counter_container__3Qzsc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn_container\":\"Buttons_btn_container__1SDUT\"};","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Scoreboard.module.css\"\r\n\r\ntype ScoreboardPropsType = {\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    changeMaxValue: (value: string) => void\r\n    changeMinValue: (value: string) => void\r\n    showSettings: boolean\r\n    errorCondition: boolean\r\n}\r\n\r\nexport const Scoreboard = (props: ScoreboardPropsType) => {\r\n    const classNameInputMax = `${s.input_value} ${props.errorCondition ? s.incorrect_value : ''}`\r\n    const classNameInputMin = `${s.input_value} ${props.errorCondition ? s.incorrect_value : ''}`\r\n\r\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(e.currentTarget.value)\r\n    }\r\n\r\n    const changeMinValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMinValue(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.scoreboard_container}>\r\n            {\r\n                props.showSettings\r\n                &&\r\n                <div>\r\n                    <div className={s.values_position}>\r\n                        <p className={s.title_value}>max value:</p>\r\n\r\n                        <input className={classNameInputMax} type={\"number\"}\r\n                               onChange={changeMaxValue}\r\n                               value={props.maxValue}\r\n                        />\r\n                    </div>\r\n                    <div className={s.values_position}>\r\n                        <p className={s.title_value}>start value:</p>\r\n\r\n                        <input className={classNameInputMin}  type={\"number\"}\r\n                               onChange={changeMinValue}\r\n                               value={props.minValue}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                ||\r\n                <div>\r\n                    <span className={`${s.amount} ${props.counter === props.maxValue ? s.limit : \"\"}`}>\r\n                      {props.counter}\r\n                    </span>\r\n                </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./Btn.module.css\"\r\n\r\ntype BtnPropsType = {\r\n    increaseCounter?: () => void\r\n    setValues?: () => void\r\n    resetCounter?: () => void\r\n    counter?: number\r\n    btn: \"inc\" | \"reset\" | \"set\"\r\n    maxValue: number\r\n    minValue: number\r\n    showSettings: boolean\r\n    changeSettingsScreen?: (value: boolean) => void\r\n    errorCondition?: boolean\r\n}\r\n\r\nexport const Btn = (props: BtnPropsType) => {\r\n    const disabledBtn = props.btn === \"inc\" && props.counter === props.maxValue || props.errorCondition\r\n\r\n    const increaseCounter = () => {\r\n        props.increaseCounter && props.increaseCounter()\r\n    }\r\n\r\n    const resetCounter = () => {\r\n        props.resetCounter && props.resetCounter()\r\n    }\r\n\r\n    const setValues = () => {\r\n        props.changeSettingsScreen && props.changeSettingsScreen(!props.showSettings)\r\n        props.setValues && props.setValues()\r\n\r\n        localStorage.setItem('Counter Values',\r\n            JSON.stringify({\r\n                minValue: props.minValue,\r\n                maxValue: props.maxValue\r\n            }))\r\n    }\r\n\r\n    const kindBtn = () => {\r\n        switch (props.btn) {\r\n            case \"inc\":\r\n                increaseCounter()\r\n                break\r\n            case \"reset\":\r\n                resetCounter()\r\n                break\r\n            case \"set\":\r\n                setValues()\r\n                break\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.btn_container}>\r\n            <button className={`${s.btn} ${disabledBtn ? s.btn_disabled : ''}`}\r\n                    disabled={disabledBtn}\r\n                    onClick={kindBtn}>\r\n                {props.btn}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from \"./Buttons.module.css\"\r\nimport {Btn} from \"./Btn/Btn\";\r\n\r\nexport type ButtonsPropsType = {\r\n    increaseCounter: () => void\r\n    resetCounter: () => void\r\n    counter: number\r\n    maxValue: number\r\n    minValue: number\r\n    showSettings: boolean\r\n    changeSettingsScreen: (value: boolean) => void\r\n    errorCondition: boolean\r\n    setValues: () => void\r\n}\r\n\r\nexport const Buttons = (props: ButtonsPropsType) => {\r\n    return (\r\n        <div className={s.btn_container}>\r\n            {\r\n                !props.showSettings\r\n                &&\r\n                <Btn increaseCounter={props.increaseCounter}\r\n                     resetCounter={props.resetCounter}\r\n                     counter={props.counter}\r\n                     maxValue={props.maxValue}\r\n                     minValue={props.minValue}\r\n                     btn={\"inc\"}\r\n                     showSettings={props.showSettings}\r\n                />\r\n            }\r\n            {\r\n                !props.showSettings\r\n                &&\r\n                <Btn increaseCounter={props.increaseCounter}\r\n                     resetCounter={props.resetCounter}\r\n                     counter={props.counter}\r\n                     maxValue={props.maxValue}\r\n                     minValue={props.minValue}\r\n                     btn={\"reset\"}\r\n                     showSettings={props.showSettings}\r\n                />\r\n            }\r\n            <Btn\r\n                btn={\"set\"}\r\n                maxValue={props.maxValue}\r\n                minValue={props.minValue}\r\n                showSettings={props.showSettings}\r\n                changeSettingsScreen={props.changeSettingsScreen}\r\n                errorCondition={props.errorCondition}\r\n                setValues={props.setValues}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./Counter.module.css\"\r\nimport {Scoreboard} from \"./Scoreboard/Scoreboard\";\r\nimport {Buttons} from \"./Buttons/Buttons\";\r\n\r\ntype CounterPropsType = {\r\n    counter: number\r\n    increaseCounter: () => void\r\n    resetCounter: () => void\r\n    maxValue: number\r\n    minValue: number\r\n    changeMaxValue: (value: string) => void\r\n    changeMinValue: (value: string) => void\r\n    showSettings: boolean\r\n    changeSettingsScreen: (value: boolean) => void\r\n    errorCondition: boolean\r\n    setValues: () => void\r\n}\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n    return (\r\n        <div className={s.counter_container}>\r\n            <Scoreboard counter={props.counter}\r\n                        minValue={props.minValue}\r\n                        maxValue={props.maxValue}\r\n                        changeMaxValue={props.changeMaxValue}\r\n                        changeMinValue={props.changeMinValue}\r\n                        showSettings={props.showSettings}\r\n                        errorCondition={props.errorCondition}\r\n            />\r\n            <Buttons increaseCounter={props.increaseCounter}\r\n                     resetCounter={props.resetCounter}\r\n                     counter={props.counter}\r\n                     maxValue={props.maxValue}\r\n                     minValue={props.minValue}\r\n                     showSettings={props.showSettings}\r\n                     changeSettingsScreen={props.changeSettingsScreen}\r\n                     errorCondition={props.errorCondition}\r\n                     setValues={props.setValues}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\n\nfunction App() {\n    const JsonValues = localStorage.getItem('Counter Values')\n    const CounterValues = JsonValues && JSON.parse(JsonValues)\n\n    const [minValue, setMinValue] = useState<number>(CounterValues ? CounterValues.minValue : 0)\n    const [maxValue, setMaxValue] = useState<number>(CounterValues ? CounterValues.maxValue : 0)\n\n    const [showSettings, setShowSettings] = useState(false)\n\n    const [counter, setCounter] = useState<number>(minValue)\n\n    const increaseCounter = () => {\n        counter < maxValue && setCounter(prev => prev + 1)\n    }\n\n    const errorCondition = (minValue >= maxValue) || minValue < 0 || maxValue < 0\n\n    const resetCounter = () => {\n        setCounter(minValue)\n    }\n\n    const changeMaxValue = (value: string) => {\n        setMaxValue(+value)\n    }\n\n    const changeMinValue = (value: string) => {\n        setMinValue(+value)\n    }\n\n    const setValues = () => {\n        setCounter(minValue)\n    }\n\n    const changeSettingsScreen = (value: boolean) => {\n        setShowSettings(value)\n    }\n\n    return (\n        <div className=\"App\">\n            <Counter counter={counter}\n                     increaseCounter={increaseCounter}\n                     resetCounter={resetCounter}\n                     maxValue={maxValue}\n                     minValue={minValue}\n                     changeMaxValue={changeMaxValue}\n                     changeMinValue={changeMinValue}\n                     showSettings={showSettings}\n                     changeSettingsScreen={changeSettingsScreen}\n                     errorCondition={errorCondition}\n                     setValues={setValues}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}